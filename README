--------------------------------------------------------------------------------
- librtipc                                                                     -
- Copyright (C) 2011-2014 Josef Raschen <josef@raschen.org>                    -
--------------------------------------------------------------------------------


The library librtipc includes several shared memory based objects for 
realtime-capable inter-process communication. These objects were implemented 
especially for situations where processes with different levels of real-time 
requirements have to communicate. 

In addition to some basic synchronization mechanisms the library includes 
several queue objects with lock-free and some of them even with wait-free 
characteristics. These objects use pooled pre-allocated memory and thus can run 
in situations where a (real-time capable) memory allocator is not available. 

Currently, librtipc is available for x86 and ARMv7 CPU architectures and runs 
on the Linux operating system. To simplify porting of the library, an 
abstraction layer for hardware and operating system functionalities has been 
introduced.  


--------------------------------------------------------------------------------
 Lock-Free/Wait-Free
--------------------------------------------------------------------------------

The terms lock-free and wait-free are used in the following meaning:

lock-free: Accessing a shared resource without locking a section exclusively 
to a single participant. This guarantees system-wide progress but not 
starvation-freedom for every single participant. 

wait-free: Wait-freedom includes the characteristics of lock-freedom and 
starvation-freedom. 

 
--------------------------------------------------------------------------------
 IPC Objects
--------------------------------------------------------------------------------

  Mutex
  - mutex.h

  Barrier
  - barrier.h
  
  Flag
  - flag.h

  Wait-Free SPSC Queue
  - spscq.h
  - single wait-free producer 
  - single wait-free consumer
  
  Wait-Free MPSC Queue
  - wfmpscq.h
  - multiple wait-free producer 
  - single wait-free consumer on x86
  - single lock-free consumer on ARMv7 (*)

  Lock-Free MPSC Queue
  - lfmpscq.h
  - multiple lock-free producer 
  - single wait-free consumer
  - implementation based on Maged M. Michael: "Hazard Pointers: Safe Memory 
    Reclamation for Lock-Free Objects"

  Lock-Free MPMC Queue
  - mpmcq.h
  - multiple lock-free producer 
  - multiple lock-free consumer
  - implementation based on Maged M. Michael: "Hazard Pointers: Safe Memory 
    Reclamation for Lock-Free Objects"

  Sensor-Buffer
  - sensorbuffer.h
  - wait-free writer 
  - lock-free consumer
  - implemeneted for situations where only the most current data is relevant 
    and older data is discarded (e.g. sensor data) 

(*) on ARMv7 the weaker lock-free charactestic applies because atomic 
opertations were implemented using retry loops 


--------------------------------------------------------------------------------
 Build
--------------------------------------------------------------------------------

1. set up some symlinks:

./configure <arch> <system>

available options:
<arch> x86, arm
<system> linux


2. build

make


--------------------------------------------------------------------------------
 Demo Applications
--------------------------------------------------------------------------------

The subdirectories 'demo' and 'benchmark' contain some examples on how to use 
librtipc. Most of the benchmarks will need root privileges to run. But be 
carful when running them: Some of them will clear the interrupt flag for some 
time, so your system will freeze for some time (or forever in case of any 
error). 


